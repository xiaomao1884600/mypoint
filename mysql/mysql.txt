1. MYSQL 支持支持事务码？
   在缺省模式下，MYSQL 是 autocommit模式的，所有的数据库跟新操作都会即时提交，所以在缺省情况下，mysql是不支持事务的。
   但是如果你的MYSQL 表类型是使用InnoDB Tables 或 BDB tables 的话，你的 MYSQL 就可以使用事务处理，使用 SET AUTOCOMMIT=0 就可以
   使 MYSQL 允许在非 autocommit模式，
   在非 autocommit 模式下，你必须使用 COMMIT 来提交你的更改，或者用ROLLBACK 来回滚你的更改。
   如： START TRANSACTION;
        SELECT @ A:=SUM(salart) FROM table WHERE type=1;
        UPDATE table2 SET summary=@ A WHERE type=1;
        COMMIT;

2. MYSQL 相比于其他数据库有哪些特点？
   MYSQL 是一个小型关系型数据库管理系统，开发者为瑞典MYSQL AB 公司,现在已经被 Sun 公司收购，支持 FreeBSD, Linux, MAC, Windows 等多种
  操作系统与其他的大型数据库例如 Oracel, DB2, SQL Server 等相比功能稍弱一些
  1、可以处理拥有千万条记录的大型数据
  2、支持常见的 SQL 语句规范
  3、可移植性高，安装简单小巧
  4、良好的运行效率，有丰富信息的网络支持
  5、调试、管理、优化简单 （相比其他大型数据库）

3. 介绍一下 mysql 的日期和时间函数
   SELECT DAYOFWEEK('2014-02-25');
   -> 3
   返回date的星期索引（1 = sunday,2= monday, ... 7=saturday）索引值符合 ODBC 的标准
   SELECT DAYOFDAY('2014-02-05');
   -> 1
   返回 date是一月中的第几天，范围为1到31;
   SELECT DAYIFTEAR('2014-02-25');
   ->56
   返回date是一年中的第几天，范围为1到366；
   SELECT MONTH('2014-02-05');
   -> 2
   返回adte的月份
   SELECT MONTHNAME('2014-02-05');
   -> February
   返回date的月份名；
   SELECT QUARTER('2014-02-25');
   -> 1
   返回date在一年中的季度，范围为1到4
   
   注意： WEEK() 对于星期日是一周中的第一天的场合，如果函数只有一个参数调用，返回date为一年的第几周，返回值范围为0到53（是的，可能有53周的开始），两个参数形式的WEEK()允许你指定一周是否已星期日或星期一开始，以及返回值为0-53 还是1-52 这里的一个表显示第二个参数是如何工作的：
   0  一周以星期日开始，返回值范围为 0-53
   1  一周以星期一开始，返回值范围为 0-53
   2  一周以星期日开始，返回值范围为 1-53
   3  一周以星期一开始，返回值范围为 1-53 （ISO 8601）

4. 如何解决MYSQL 数据库中文乱码问题？
   在数据库安装的时候指定字符集
   如果在安装完了以后可以更改一下文件：
   C:\Program Files\MYSQL\MYSQL Server 5.0\my.ini 里的所有的 default-character-set=gbk;
   C:\Program Files\MYSQL\MYSQL Server 5.0\data\depot_development\db.opt 中 default-character-set=gbk   default-collation=gbk_chinese_ci
   建立数据库时候，指定字符集类型
   CREATE DATABASE haichen
   CHARACTER SET 'gbk'
   COLLATE 'gbk_chinese_ci';
   
   2.建表的时候，也指定字符集
   CREATE TABLE student(
    ID varchar(40) NOT NULL default '',
    UserID varchar(40) NOT NULL default '',
   ) ENGINT=InoDB DEFAULT CHARSET=gbk;

   1.创建数据库的时候：CREATE DATABASE `database`
     CHARACTER SET 'utf8'
     COLLATE 'utf_general_ci';
   2. 建表的时候： CREATE TABLE `database_user`(
     `ID` varchar(40) NOT NULL default '',
     `UserID` varchar(40) NOT NULL default '',
    )ENGINE=InnoDB DEFAULT CHARACTER=utf8;
   3.设置 URL 的时候
   jdbc:mysql://localhost:3306/database?userUnicode=true&characterEncoding=UTF=8

5. 如何提高 MYSQL 的安全性？
   1.如果 MYSQL 客户端和服务端的连接需要跨越并通过不可信任的网络，那么需要使用 ssh隧道来加密该连接的通信。
   2.使用 set password 语句来修改用户的密码，先 ‘mysql -u root’登陆数据库系统，然后 ‘mysql>update mysql.user set password=password(" newpwd")’, 最后执行 “flush privileges” 就可以了。
   3.Mysql 需要提防的攻击有：防偷听、篡改、回放、拒绝服务等，不涉及可用性和容错方面。对所有的连接、查询、其他操作使用基于 acl 即访问控制列表的安全措施来完成。也有一些对ssl连接的支持。
   4.设置除了 root 用户外的其他任何用户不允许访问 mysql 主数据库中的user表；加密后存放在user表中的加密后的用户密码一旦泄露，其他人可以随意用该用户名/密码相应的数据库；
   5.使用 grant和revoke语句来进行用户访问控制的工作；
   6.不要使用明文密码，而使用 md5()和shal()等单向的哈希函数来设置密码；
   7.不要选用字典中的字来密码；
   8.采用防火墙可以去掉 50%的外部危险，让数据库系统躲在防火墙后面工作，或放置在dmz区域中；
   9.从因特网上用nmap来扫描3306 端口，也可用 telnet server_host 3306 的方法测试，不允许从非信任网络中访问数据库器的3306 号 tcp端口，
   需要在防火墙或路由器上做设定；

  + 10.为了防止被恶意传入非法参数，例如 where id=234, 别人却输入 where id=234 or 1=1 导致全部显示，所以在web的表单中使用 “或” “来用字符串， 在动态 url中加入%22 代表双引号、%23 代表井号、 %27 代表单引号；传递为检查过的值给mysql 数据库时非常危险的；”
    11. 在传递数据给 mysql时检查一下大小；
    12.应用程序需要连接到数据库应该使用一般的用户账号，开放少数必要的权限给该用户；$page_devide$
    13.在个编程节口 （c c++ php perl java jdbc等）中使用特定 ‘逃脱字符’ 函数；在因特网上使用nysql数据库时一定少用传入明文的数据，二用ssl 和 ssh的加密方式数据来传输；
    14.学会使用 tcpdump 和strings 工具来查看传输数据的安全性， 例如tcpdump -l -i etho -w -src or dst port 3306 strings  以普通用户来启动 mysqlh数据库服务；
    15.不要使用到表的连接符号，选用的参数 -skip -symbolic -links;
    16.确信在 mysql目录中只有启动数据库服务的用户才可以对文件有读和写的权限；
    17.不许将 process或super权限可用于切断客户端连接、改变服务器运行参数状态、控制拷贝复制数据库的而服务器；
    18.file权限不赋给管理员以外的用户，防止出现load data '/etc/passwd' 到表中再用 select显示出来的问题；
    19.如果不相信dns服务公司的服务，可以在主机名称允许表中只设置ip数字地址；
    20.使用 max_user_connections 变量来是msyqld服务过程，对一个指定账户指定连接数；
    21.grant 语句也支持资源控制选项；
    22.启动 mysqld 服务进程的安全选项开关， - local -infile = 0 或 1 若是 0 则客户端程序就无法使用local load data 了，赋权的一个例子 grant inser(user) on mysql.user to 'user_name'@'host_name'; 若使用 - skip -grant -talbes 系统将对任何用户的访问不做任何访问控制，但可以用 mysqladmin flush -privileges 或 mysqladmin reload 来开启访问控制；默认情况是 show databases 语句对所有用户开放，可以用 -skip-show-databases 来关掉。 
   23.碰到error 1045(2800)access denied for user 'root' @"localhost" (using password:no) 错误时，你需要重新设置密码，具体方法是：先用 
  -skip-grant-tables 参数启动mysqld, 然后执行 mysql -u root mysql，mysql>update user set password=password('newpassword') where user='root'; mysql>flush provileges


6. MYSQL 多版本并发控制
  MVCC 避免了许多需要加锁的情形以及降低消耗。这取决于它实现的方式，它允许非阻塞读取，在写的操作的时候阻塞必要的记录。
  MVCC 保存了某一时刻数据的一个快照，意思就是说无论事物运行了多久，它们都能看到一致的数据，也即是在相同的额时间下，不同的事物看到相同表的数据时不同的。
  InnoDB实现MVCC的方法是,它存储了每一行的两个额外的隐藏字段，这两个隐藏字段分别记录了行的创建的时间和删除的时间。在每个事件发生的时候，每行存储版本号，而不是存储事物都会保存记录的系统版本号。依照事物的版本来检查每行的版本号。在事物隔离级别为可重复读的情况下，来看看怎样应用它。
  SELECT   
  InnoDB 必须知道行的版本号，这个行的版本号至少要和事物版本号一样的老。这个既能确定事物开始之前行是存在的，也能确定事物创建或修订了这行。行的删除操作的版本一定是未定义的或者大于事物的版本号。确定了事物开始之前，行没有被删除。


7. mysql的优化
  一、数据库的设计
   尽量把数据库设计的更小的占磁盘空间。
   1. 尽可能使用更小的整数类型。（mediumint就比int更合适）
   2. 尽可能的定义字段为 not null，除非这个字段需要 null.
   3. 如果没有用到变长字段的话 比如 varchar，那就采用固定大小的记录格式比如char.
   4. 表的主索引应该尽可能的短，这样的话每条记录都有名字标志且高效。
   5. 只创建确实需要的索引，索引有利于检索记录，但是不利于快速保存记录。如果总是要在表的组合字段上做搜索，那么就在这些字段上创建索引，索引的第一部分必须是最常使用的字段，如果总是需要用到很多字段，首先就应该多复制这些字段，是索引更好的压缩。
   6.所有数据都得在保存到数据库前进行处理。
   7.所有字段都得有默认值
   8.在某些情况下，把一个频繁扫描的表分成两个速度会快好多，在对动态格式表扫描以取得相关记录时，它可能使用更小的静态格式表的情况下更是如此。
   
  二、系统的用途
   1.尽量使用长连接
   2. explain 复杂的SQL语句
   3.如果两个关联表要做比较话，做比较的字段必须类型和长度都一致。
   4.LIMIT 语句尽量要跟 order by 或者 distinct 这样可以避免做一次 full table scan. 
   5.如果想要清空表的所有记录，建议用truncate table tablename 而不是delete from tablename
   6.能使用 STORE PROCEDURE 或者 USER FUNCTION 的时候。
   7.在一条 insert 语句中采用多重记录插入格式。而且使用 load data infile 来导入大量数据，这比单纯的 insert 快好多
   8. 经常 OPTIMIZE TABLE  来整理碎片。
   9. 还有就是 date 类型的数据如果频繁要做比较的话，尽量保存在 unsigned int 类型比较快。
   
 三、系统的瓶颈
   1.磁盘搜索
     并行搜索，把数据分开存放到多个磁盘中，这样能加快搜索时间。
   2.磁盘读写（IO）
     可以从多个媒介中并行的读取数据。
   3.CPU 周期
     数据存放在主内存中，这样就得增加 CPU 的个数来处理这些数据
   4.内存宽带
     当 CPU 要将更多的数据存放到 CPU 的缓存中来的话，内存的宽带就成了瓶颈。

8.介绍一下如何优化 MYSQL
   一、在编译时优化 MYSQL
      如果你从源代码分发安装 MYSQL，要注意，编译过程对以后的目标程序性能有重要的影响，不同的编译方式可能得到类似的目标文件，但性能可能相差很大，因此，在编译安装MYSQL适应仔细根据你的应用类型选择最可能好的编译选项，这种定制的MYSQL 可以为你的应用提供最佳性能。
  
    技巧：选用较好的编译器和较好的编译选项，这样应用可提高性能 10-30%。
    二、使用pgcc 编译器
    该编译器针对运行在奔腾处理器系统上的程序进行优化，用pgcc编译MYSQL 源代码，总体性能课提高 10%,当然如果你的服务器不是用奔腾处理器，就不必用它了，因为它是专为奔腾系统设计的。
    三、仅使用你想使用的字符集编译MYSQL
    MYSQL 目前提供多达 24 种不同的字符集，为全球用不以他们自己的语言插入或者看表中的数据。缺省情况下，MYSQL 安装所有者这些字符集，然而，最好的选择是指选择一种你需要的。  
    四、将 mysqld 编译成静态执行文件而无需共享库也能获得更好的性能。通过在配置时指定下列选项，可静态编译 mysqld
     %> ./configure -with -mysqld-ldflags= -all -static [--other-configuration-options]
    五. 配置样本
    下列配置命令常用于提高性能：
     %CFLAGS="-O6 -mpentiumpro  -fomit-frame-pointer" CXX=gcc CXXFLAGS="-O6 -mpentiumpro -fomit-frame-pointer -felide-constructors -fno-exceptions -fno-rtti" ./configure -prefix=/usr/local -enable-assembler -with -mysqld-ldflags=-all -static -disable-shared 
    六. 调整服务器
    确保运用正确的编译固然重要，但这只是成功的第一步，配置众多的MYSQL 变量同样对服务器的正常运行起关键作用，这个配置文件就是my.cnf文件。MYSQL 已经提供了几个 my.cnf 文件 my-medium.cnf\ my-large.cnf 和 my-hugee.cnf 规模说明可在描述配置文件使用的系统类型标题中找到。如果在只有相当少内存的系统上运行MYSQL，而且只是偶尔的用一下，那么 my-small.cnf会比较理想，因为它命令 mysqld 只使用最少的资源，类似地，如果你计划构建电子商务超市，而且系统拥有2G内存，那么你可能要用到mysql-huge.cnf 文件了。
   为了利用这些文件中的一个，你需要复制一个最合适需求的文件，改名为my.cnf  你可以选择使用配置文件三种作用范围的文件了。
   Global: 将 my.cnf 文件复制到服务器的 /etc 目录下，这使得配置文件中的变量作用于全局，即对所有服务器上的MYSQL 数据库服务器有效。
   Local: 将my.cnf 文件复制到 [MYSQL-INSTALL-DIR]/var/目录下，使得my.cnf作用于特定的服务器。 [MYSQL-INSTALL-DIR] 表示MYSQL安装目录。
   User: 你可以在限制作用于特定的用户，将my.cnf复制到用户的根目录下。
   究竟如何设置 my.cnf 中的这些变量呢？ 更进一步说，你可以设置哪一个变量，虽然所用变量对 MYSQL 服务器相对通用，每一个变量与MYSQL的某些组件有更特定的关系。如变量 max_connects 归在 mysqld 类别下，执行下列命令即可知道：
   %>/usr/local/mysql/libexec/mysqld-help
   它显示大量的选项及与mysqld相关的变量。你可以很容易地在该行文字下找出变量；
   Possible variables for option -set-variable (-O) are
   然后你可以如下设置 my.cnf 中的那些变量：
   set-variable=max_connections=100
   它设置 MYSQL 服务器的最大并发连接数为100. 要确保在my.cnf 文件中的[mysqld] 标题下插入变量设置。
   
   七、 表类型
    很多MYSQL用户可能很惊讶，MYSQL确实为用户提供5种不同的表类型，称为DBD\HEAP\ISAM\MERGE和MYIASM 。 DBD归为事物安全类，而其他为非事物安全类。
      1. 事务安全 BDB
      Berkeley DB 表示支持事物处理的表，由 Sleepycat 软件公司开发。它提供 MYSQL 用户期待已久的功能-事物控制。事物控制在任何数据库系统中都是一个极有价值的功能，因为它们确保一组命令能成功地执行。
      2. 非事务安全
     HEAP 表示 MYSQL 中存放数据最快的表。这是因为他们使用存储在动态内存中的一个哈希索引，另一个要点是如果 MYSQL 或 服务器崩溃，数据将丢失。
     ISAM 表是一个有趣的新类型，在3.23.25 之后出现。一个 MERGE 表实际上是一个相同的MYISAM 表的集合。合成一个表。主要是为了效率原因。这样可以提高速度、搜索效率、修复效率并节省磁盘空间。
     MYIASM 这是MYSQL 的缺省表类型，他基于IASM代码，但很有用的扩展，MYIASM 比较好的原因：
     MYIASM 表小于 IASM 表，所以使用较少资源。
     MYIASM 表在不同的平台上二进制层可移植。
     更大的键码尺寸，更大的键码上限。
     3. 指定表类型
      你可在创建表时指定表的类型。
     4.更多的表类型
     SHOW 你可能有兴趣知道 MYSQL 服务器究竟干了什么，下列命令给出一个总结：
     mysql>show stauts;
     
     它给出了一个相当长的状态变及值的列表。有些变量包含了异常终止客户的数量、异常终止连接的数量、连接尝试的次数、最大并发连接数和大量其他有用的信息。这些信息对找出系统问题和低效极具价值。
     SHOW 还能做更多的事情。它可以显示关于日志文件、特定数据库、表、索引、进程和权限表中有价值的信息。
     6.EXPLAIN
      当你面对SELECT 语句时，EXPLAIN 解释 SELECT 命令如何被处理。这不仅对决定是否应该增加一个索引，而且对决定一个复杂的 Jion 如何被MYSQL 处理都是有帮助的。
     7. OPTIMIZE
     OPTIMIZE 语句允许你恢复空间和并数据文件碎片，对包含变长行的表进行了大量更新和删除后，这样做特别重要。OPTIMIZE 目前只工作于MyIASM 和 BDB 表。
     

9. 介绍一下 MYSQL 的存储引擎
   MYSQL 中的数据用各种不同的技术存储在文件中，这些文件中的每一种技术都使用不同的存储机制，索引技巧，锁定水平并且最终提供广泛的不同的功能和能力。通过选择不同的技术。你能够或得额外的速度或者功能，从而改善你的引用的整体功能。
   各个存储之间的区别 ：
  	
	1. 字段和数据库类型：虽然所有引擎都支持通用的数据类型，例如 整型，实型，字符型等，但是不是所有的引擎都支持其他的字段类型，特别是BLOG （二进制大对象）或者 TEXT 文本类型。 其他的引擎也许仅支持有限的字符宽度和数据大小。这些局限性可能直接影响到你可以村存储的数据，同时也可能会对你实施的搜索的类型或者你对那些信息创建的索引产生间接的影响。这些区别能够影响你的应用程序的性能和功能，因为你必须要根据你要存储的数据类型选择对需要的存储引擎的功能做出决策。
       
	 2.锁定  数据库引擎中的锁定功能决定了如何管理信息的访问和更新。当数据库中的一个对象为信息更新锁定了，在更新完成之前，其他处理不能修改这个数据（在某些情况下还不允许读这种数据）。
        锁定不仅影响许多不同的应用程序如何更新数据库中的信息，而且还影响对那个数据的查询。这是因为查询可能要访问正在被修改或者更新的数据。总的来说，这种延迟是很小的。大多数锁定机制主要是为了防止多个处理更新同一个数据。由于向数据中插入信息和跟新信息者两种情况都需要锁定，你可以想象，多个应用程序使用同一个数据库可能会有河大的影响。不同的存储引擎在不同的对象级别支持锁定，而且这些级别将影响可以同时访问的信息。得到支持的级别有三种： 表锁定、块锁定、行锁定。支持最多的是表锁定，这种锁定是在 MyISAM 中提供的。在数据跟新是，他锁定了整个表，这就防止了许多引用程序同时更新一个具体的表。这对应用很多的多用户数据有很大的影响，因为它延迟了更新的过程。页级锁定使用 Berkeley DB 引擎，并且根据上载的信息页（8kb）锁定数据。当在数据库的很够地方更新的时候，这种锁定不会出现什么问题，但是，由于增加几行信息就要锁定数据结构的最后8kb,当需要增加大量的行，特别是大量的小型数据，就会带来问题。航级锁定提供了最佳的并行访问功能，一个表中只有一行数据被锁定。这就意味着很多应用程序能都更新同一个表中的不同行的数据，而不会引起锁定的问题。只有 InnoDB 存储引擎支持行级锁定。
   
         3.建立索引   建立索引在搜索和恢复数据库中的数据的时候能够显著提高性能。不同的存储引擎提供不同的制作引擎的技术。有些技术也许会更适合你存储的数据类型。 有些存储引擎根本就不支持索引，其原因可能是它们使用基本表索引或者是因为数据存储的方式不允许索引。

         4.事务处理  事务处理提供在向表中更新和插入信息期间的可靠性。这种可靠性是通过如下方法实现的，它允许你更新表中的数据，但仅当应用的应用程序的多有相关操作完全完成后才接受你对表的更改。


10.如何写出高质量、高性能的 MYSQL 查询
   1. IS NULL 与 IS NOT NULL 
     不能用 null 作索引，任何包含 null 值的列将不会被包含在索引中，即使索引有多列这样的情况下，只要这些列中有一列含有null, 该列就会从索引中排除，也就是说如果某列存在空值，即使对该列建立索引也不会提高性能。
     任何在where 字句中使用 is null 或 is not null 的语句优化器是不允许使用索引的。
   
   2.链接列
   对于有链接的列，即使最后的链接值为一个静态值，优化器是不会使用索引的，我们一起来卡一个例子：假定有一个职工表（employee）,对于一个职工的姓名分成列存放（FIRST_NAME 和 LAST_NAME），现在要查询一个叫比尔。克林顿（Bill Cliton）的职工。
    下面是sql:
     select * from employee  
     where 
     first_name||''|| last_name='Beill Cliton'
    上面这条语句完全可以查出是否有 Bill Cliton 这个员工，但是注意，系统优化器对于 last_name创建的索引没有使用。
    当采用下面这种sql语句，Oracle 系统就可以采用基于 last_name 创建的索引：
     select * from employee
     where
     first_name='Beill' and last_name='Cliton'
     遇到如果是一个变量（name）中存放着 Bill Cliton 这个员工的姓名，对于这种情况我们可以使用一个函数将name中的姓和名分开就可以了，但是注意，这个函数不恩能够作用在索引列上，下面是sql
     select * from emplyee
     where
     first_name= SUBSTR('&&name', 1 INSTR('&&name','')-1)
     and
     last_name=SUBSTR('&&name',INSTR('&&name','')+1)
  
    3.带通配符（%）的like 语句
   同样以上面的例子来看这种情况，目前的需求是这样的，要求在职工表中查询名字包含cliton的人，可以采用如下的查询SQL查询：
     select * from employee where last_name like 'c%'
  
    4.Order by 语句
    ORDER BY 语句决定了 Oracle 如何将返回的查询结果排序。Order by 语句对要排序的列没有什么特别的限制，也可以将函数加入列中。任何在Order by 语句的非索引项或者有计算表达式都将是降低查询速度。
    仔细检查 order by 语句以找出非索引项或者表达式，它们会降低性能。解决这个问题的的办法就是 重写order by 语句以使用索引，也可以为所使用的列建立另外一个索引，同时应绝对避免在 order by 字句中使用表达式。
   
    5.NOT
    我们在查询是经常在where 子句中 使用一些逻辑表达式，如大于、小于、等于、以及不等于等，也可以使用and(与)、or(或) 以及 not(非)。NOT 可用来对任何逻辑运算符号相反，下面是一个 NOT 字句的例子：
     ...where status <> 'INVALID '
   
   再看看这个例子：
     select * from employee where salary <> 3000;
   对于这个查询，可以改写为不使用NOT:
    select * from employee where salary < 3000 or salary > 3000;
   第二种查询允许 Oracle 对 salary 列使用索引，而第一种查询则不能使用索引。

   6. IN 和 EXISTS
   在where字句中可以使用两种格式的子查询。
   第一种格式是使用IN 操作符：
   ...where column in(select * from ... where)

   第二种格式是使用 EXIST 操作符：
   ...where exists(select 'X' from ... where...)
  
  注意：第二种格式要远比第一种格式的效率高。在Oracle中可以将所有的IN操作符子查询改写为使用 EXISTS 的子查询


   7. 查询结果添加序号
 
  例如 user表 查出的用户进行序号标记
	select (@rowNO := @rowNo+1) AS rowno,username, userid from (SELECT username, userid  FROM user) a,(select @rowNO :=0) b  
  实际两次查询: 先将 user表的用户先查出来，再对查询的结果按自然顺序进行查询 

或者在命令行：
	set @rowNO = 0;
	select (@rowNO := @rowNo+1) AS rowno,username, userid  from user 
   表中第一列即为rowNO, 从1开始计数
       
            
   

   